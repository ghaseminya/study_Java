/*
//객체 선언/생성/호출


객체지향
프로그래밍에서 객체지향 언어는 
프로그래밍을 독립적인 객체로 나누어서 프로그래밍 하는 것을 말합니다.



객체 지향 프로그램 (Object Oriented Programming)
	• 자바 프로그램은 클래스들이 모여서 만들어진 프로그램이라고 할 수 있습니다.
	• 기존 클래스들을 이해하고 이 클래스로 부터 얻어진 객체(Object)를 사용하여 프로그램을 만드는 것이 객체 지향 프로그래밍입니다.
	• 자바로 만든 이 객체지향 프로그램은 부품을 모아서 조립한 하나의 제품처럼 객체를 부품에 비유할 수 있습니다.
	• 객체지향 프로그램은 코드 내의 모든 것을 객체(Object)로 표현합니다.
	• 객체는 자신만의 속성(데이터)과 기능(메소드)을 가지고 있습니다.
	• 클래스는 이 객체를 만들기 위한 틀을 체공합니다.
	• 실제 세계를 모델링하여 소프트웨어를 개발하는 방법




객체(Object) 의미
	• 객체(object)는 인스턴스(instance)라고 부르기도 합니다.
	• 인스턴스는 청사진을 통해 만들어진 실체입니다.
	• 객체는 자신의 정보를 가지고 있는 독립적인 주체


객체의 구성
객체에게서 뽑아낸 속성과 기능은 클래스 안에 변수와 메소드로 표현됩니다.

객체 = 변수(데이터) + 메소드(기능)

객체(Object)
	• 상태(State)와 동작(Behavior)을 가지고 있습니다.

객체의 상태(State)
	• 객체의 특징값(속성, 데이터, 상태)
	• 명사
	• 변수(데이터, 속성, 상태)
객체의 동작(Behavior)
	• 객체가 취할 수 있는 기능
	• 동사
	• 메소드(기능, 행위, 행동, 방법, 방식, 동작)



//----------------------------
클래스 구조
	• 객체(Object)를 생성하기 위해서는 먼저 클래스의 구조를 알고 클래스를 작성 할 수 있어야 합니다.
	• 클래스는 class 키워드를 사용하여 정의합니다.

[지정자]  class 클래스명 {
        [ 인스턴스 변수 정의]
        [ 메소드 정의]
        [ 생성자 정의]
}



클래스 헤더
	• 클래스를 선언하는 부분
	• class라는 예약어를 중심으로 오른쪽은 클래스 명이며
	• 왼쪽은 접근 제한(Access Control/Access Modifier)과 클래스의 형태 및 클래스 종류를 나타내게 됩니다.

[접근제한] [클래스 종류] class [클래스명] 

[접근제한]	• 접근제한은 말 그대로 현재 클래스를 접근하여 생성하고 사용하는데 있어 제한을 두겠다는 의미에서 정의하는 것입니다. 
		• 클래스에서 쓰이는 접근 제한은 public을 정의하는 방법과 아예 정의하지 않는 방법 두 가지가 있습니다.
		
[클래스종류]
	• 현재 클래스가 어떤 클래스인지를 알리는 수식어의 일종으로 
           최종(final)클래스 또는 추상(abstract)클래스와 같은 클래스 종류를 의미하며 현재 클래스가 어떤 클래스인지를 알리는 수식어의 일종입니다.
	• 이 부분이 생략되게 되면 일반 클래스임을 의미 하게 됩니다.
		 
[클래스명]	클래스의 이름을 의미



//----------------------------

[객체 생성]
	• 클래스의 이름과 동일한 이름을 가진 생성자를 이용해서 객체를 생성합니다.
	• 이때 new 키워드와 함께 생성자함수를 호출하여 객체를 생성하게 됩니다.

클래스명 객체 = new 생성자(); 



[멤버 접근법]
	• mc와 같은 객체의 참조(reference)를 통해 .(점)를 사용하여 해당 객체의 메서드나 변수 즉 멤버들에 접근 할 수 있습니다. 
	•  .는 dot연산자라고도 하며 사용법은 객체참조.멤버명 형식으로 사용됩니다. 

[멤버 접근 형식]
객체참조.멤버명

MyClass mc;
mc = new MyClass();

mc.setAge(27);
 
 
 
클래스 vs 객체 vs 인스턴스
클래스(Class)		객체를 만드는 설계도
객체(Object)		클래스로부터 만들어지는 각각의 객체
인스턴스(Instance)	객체를 그 클래스의 인스턴스(Instance)라고도 합니다.


*/
//주 클래스: public으로 선언된 클래스
public class InstanceEx01 {
	//클래스의 구성요소: 멤버필드, 생성자, 멤버메소드

	//멤버 필드
	int var1;	//변수
	final int NUM_TWO=2; //상수
	
//	생성자: 객체 생성시 호출 되고 멤버변수를 초기화하는 역할
//	생성자를 호출하면
//	멤버 필드와 멤버 메소드가 생성되어 메모리에 올라갈 수 있도록 해줍니다.
	public InstanceEx01(){}
	
	//멤버 메소드
	public int sum(int a, int b){
		return a+b;
	}	
	
	//메인 메소드
	public static void main(String[] args) {		
		//객체 생성시 main은 객체에 포함되지 않음.
		//그냥 메인함수로만 취급
		//클래스 로더가 main을 메모리에 올리고 
		//그 다음 객체를 생성합니다. 멤버들만(멤버 변수, 멤버메소드)만 객체에 포함됩니다.
		
		//객체 선언
		InstanceEx01 me1;
		InstanceEx01 me2;
		
		//객체 생성
		me1 = new InstanceEx01();
		me2 = new InstanceEx01();
		//new : 객체 생성(인스턴스 생성) 의미
		//() : InstanceEx01() == 매개변수가 없는 디폴트 생성자를 의미
		
		
//		질문: 같은 클래스를 가지고 객체를 생성하게 되면 같은 참조값을 가지나요?
//		답: 다른 참조값을 가지고 멤버필드도 개별적으로 존재하게 됩니다.
		//객체 출력(참조값)
		System.out.println(me1);	//InstanceEx01@659e0bfd
		System.out.println(me2);	//InstanceEx01@2a139a55
		
		//객체의 멤버 변수 출력
		System.out.println();		
		System.out.println(me1.var1);	//0
		System.out.println(me1.NUM_TWO); // 2
		
		//객체의 멤버 변수 변경하기
		System.out.println();		
		me1.var1 = 10;
		System.out.println(me1.var1);	//10
		System.out.println(me2.var1);	//0
	

		//멤버 상수 변경하기
		//멤버 상수는 변경할 수 없으므로 변경시 Error
//		me1.NUM_TWO = 20; //Error: The final field InstanceEx01.NUM_TWO cannot be assigned
		
		System.out.println();
		//멤버 메소드 호출
		int result = me1.sum(20, 40);
		System.out.println("멤버 메소드 호출후 반환값 : " +  result );	
		//멤버 메소드 호출후 반환값 : 60
		
	}
}
