/*
//캡슐화에서 멤버변수와 멤버함수
//인스턴스변수와 인스턴스 함수 사용하기

//-------------------------------------------

캡슐화(Encapsulation)
	• 내부의 동작 방법을 숨기고 사용자에게는 사용 방법만을 알려주는 것
	• 관련이 있는 데이터 또는 동작(기능)들을 하나로 묶어 요약하고(모듈화)
	• 사용자에게는 내부적인 접근을 허용하지 않는 대신에 사용의 편의성을 제공해 주는 것(정보 은닉)
	• 즉, 객체 끼리 약속되지 않은 부분은 감싸서 숨겨버리는 것을 말합니다. 캡슐화를 통해서 정보은닉을 달성할 수 있습니다.

//-------------------------------------------

캡슐화 - 멤버변수
	• instance변수
	• static변수

[instance변수(개인이 소유하고 있는 머그컵)]
객체가 생성될 때 각 객체들마다 따로 따로 생성 되어 고유의 값을 받아 각 객체의 속성으로 자리 잡는 변수


[static변수(약수터에 있는 물 바가지)]
여러 개의 객체가 생성될 때 단 하나만 생성 되며 모든 객체들이 공유하는 개념으로 사용되는 변수


//-------------------------------------------

캡슐화 - 멤버메서드(멤버함수)
	• 객체가 할 수 있는 동작을 정의하는 것
	• 메서드(멤버함수)도 instance메서드와 static메서드로 나뉘어 집니다. 


메서드의 구성
[접근제한] [반환형] [메서드명](자료형 인자1, 자료형 인자2, …){
 
       수행구문1;
       수행구문2;
   …;
} 
 

접근제한	• 객체나 멤버들에 대한 접근을 제한하는 방법
		• public, protected, default, private의 종류가 있습니다.
		
반환형		• 메서드(멤버함수)에서 해야 할 일들을 모두 끝 마치고 마지막으로 메서드(멤버함수) 자신을 불러준 곳(호출 한 곳)으로 반환하는 값의 자료형을 의미
		• 반환 값이 없다면 void라는 예약어를 사용하고 생략은 불가능합니다.
		
메서드명	• 사용자 정의 이름(User defined name)

인자		• Arguments
		• 메서드(멤버함수) 호출 시에 필요에 따라 특정 값을 제공해주기 위해 미리 선언한 것
		• 메서드(멤버함수)를 호출할 때에는 반드시 인자의 자료형과 수가 일치해야 한다. 
		
수행구문	• 기능 수행을 위한 제어문 또는 실행구문 등을 의미

*/
public class MethodEx05 {

	// 멤버 변수들
	int var1,var2;

	// 메서드(멤버 함수)
	//[접근제한] [반환형] [메서드명](자료형 인자1, 자료형 인자2)
	public int sum(int a, int b){
		//수행구문;
		return a+b;
	}

	// 메서드(멤버 함수)
	public int times(int a, int b){
		return a*b;
	}

	public static void main(String[] args){
		MethodEx05 mm = new MethodEx05();

		int result = mm.sum(77, 11);
		System.out.println("result="+result);

		result = mm.times(77, 11);
		System.out.println("result="+result);
	}
}


//출력결과
//result=88
//result=847



